FROM nvidia/cuda:10.1-runtime-ubuntu18.04
#FROM tensorflow/tensorflow:2.3.1-gpu
#FROM ubuntu:18.04
#ENV version_tf=2.4.0
ENV version_tf=2.3.1

ENV DIR_BUILD=./built
ENV DIR_TF=tensorflow_cpp_gpu
RUN apt-get update && apt-get install -y --quiet --no-install-recommends \
  vim \
  wget \
  gcc \
  g++

# TensorFlow layer
#USER root
WORKDIR /work
RUN mkdir ${DIR_TF}
RUN wget -q https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-${version_tf}.tar.gz --no-check-certificate
RUN tar -C /usr/local -xzf ./libtensorflow-gpu-linux-x86_64-${version_tf}.tar.gz
RUN rm ./libtensorflow-gpu-linux-x86_64-${version_tf}.tar.gz

ENV LIBRARY_PATH=$LIBRARY_PATH:/usr/local/:/usr/local/cuda-10.1/targets/x86_64-linux/lib/
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/:/usr/local/cuda-10.1/targets/x86_64-linux/lib/

# open-cv layer
RUN apt-get install -y -q --no-install-recommends software-properties-common
RUN add-apt-repository "deb http://security.ubuntu.com/ubuntu bionic-security main"
RUN apt-get -y install \
  build-essential \
  checkinstall \
  cmake \
  unzip \
  pkg-config \
  yasm \
  git \
  gfortran \
  python3-dev
RUN apt-get -y install \
  libjpeg8-dev \
  libpng-dev \
  libavcodec-dev \
  libavformat-dev \
  libswscale-dev \
  libdc1394-22-dev \
  libxine2-dev \
  libv4l-dev
RUN apt-get -y install \
  libjpeg-dev \
  libpng-dev \
  libtiff-dev \
  libtbb-dev
RUN apt-get -y install \
  libavcodec-dev \
  libavformat-dev \
  libswscale-dev \
  libv4l-dev \
  libatlas-base-dev \
  libxvidcore-dev \
  libx264-dev \
  libgtk-3-dev

RUN add-apt-repository "deb http://security.ubuntu.com/ubuntu xenial-security main" && \
  apt-get -y install libjasper-dev

RUN cd /usr/local/src && \
  git clone https://github.com/opencv/opencv.git && \
  git clone https://github.com/opencv/opencv_contrib.git && \
  cd opencv_contrib && \
  git checkout -b 3.4.3 refs/tags/3.4.3 && \
  cd ../opencv/ && \
  git checkout -b 3.4.3 refs/tags/3.4.3 && \
  mkdir build && \
  cd build && \
  cmake -D CMAKE_BUILD_TYPE=Release \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D WITH_TBB=ON \
    -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib/modules .. && \
  make -j7 && \
  make install && \
  echo /usr/local/lib > /etc/ld.so.conf.d/opencv.conf &&\
  ldconfig -v
RUN opencv_version

ENTRYPOINT ["/bin/bash"]
#COPY ./entrypoint.sh ./
#ENTRYPOINT ["sh", "./entrypoint.sh"]